(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(t,e,i)=>{const o=i(809),{emptyLine:r,lightningChart:a,yDimensionStrategy:s,LegendBoxBuilders:d,AxisScrollStrategies:n,AxisTickStrategies:l,AutoCursorModes:u,Themes:S}=o,{createProgressiveFunctionGenerator:c}=i(27),x=(t,e,i,o,r)=>{let a;for(let s=i;s<=o;s+=r){const i=e(s),o=Math.abs(i-t);if(void 0===a||o<a.delta)a={x:s,delta:o};else if(void 0!==a&&o>a.delta)break}return a.x},m=a().ChartXY({}).setTitle("Probability distribution + Simulated accumulation and BoxSeries").setAutoCursorMode(u.onHover).setAutoCursor((t=>t.setResultTableAutoTextStyle(!1).setTickMarkerXAutoTextStyle(!1).setTickMarkerYAutoTextStyle(!1))).setPadding({right:20}),y=-4,h=.02,g=m.getDefaultAxisY(),p=m.addAxisY();m.getDefaultAxisX().setInterval(y,4).setScrollStrategy(void 0),g.setTitle("Distribution function").setScrollStrategy(n.expansion).setTickStrategy(l.Numeric,(t=>t.setMajorTickStyle((t=>t.setGridStrokeStyle(r))).setMinorTickStyle((t=>t.setGridStrokeStyle(r))))),p.setTitle("Accumulated distribution (%)").setInterval(0,1).setScrollStrategy(void 0).setTickStrategy(l.Numeric,(t=>t.setMajorTickStyle((t=>t.setGridStrokeStyle(r))).setMinorTickStyle((t=>t.setGridStrokeStyle(r)))));const b=m.addAreaSeries({yAxis:p}).setName("Simulated Cumulative Distribution"),w=m.addAreaSeries({yAxis:g}).setName("Probability Distribution"),T=m.addAreaRangeSeries({yAxis:g}).setName("Violin"),k=m.addBoxSeries({yAxis:g,dimensionStrategy:s}).setName("Box");((t,e)=>{b.clear(),w.clear(),k.clear(),T.clear();const i=t=>1/(1*Math.sqrt(2*Math.PI))*Math.pow(Math.E,-Math.pow(t-0,2)/2),o=((t,e,i,o)=>{const r=[];for(let e=-4;e<=4;e+=.02)r.push(t(e));const a=r.reduce(((t,e)=>t+e),0),s=[];let d=0;for(const t of r)d+=t/a,s.push(d);return t=>{const e=(t- -4)/8*400,i=Math.min(Math.max(Math.round(e),0),s.length-1);return s[i]}})(i);g.isStopped()||g.setInterval(0,1),c().setSamplingFunction(o).setStart(y).setEnd(4).setStep(h).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach((t=>b.add(t))),c().setSamplingFunction(i).setStart(y).setEnd(4).setStep(h).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach((t=>{w.add(t),t.y>=.001&&T.add({position:t.x,high:1+t.y/2,low:1-t.y/2})})),setTimeout((()=>{const t=x(.25,o,y,4,h),e=x(.5,o,y,4,h),i=x(.75,o,y,4,h),r=i-t,a={start:.9,end:1.1,lowerExtreme:t-1.5*r,lowerQuartile:t,median:e,upperQuartile:i,upperExtreme:i+1.5*r};k.add(a)}),1500)})(),m.addLegendBox(d.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(m),b.setCursorResultTableFormatter(((t,e,i,o,r)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Simulated Cumulative Distribution").addRow("Position "+a).addRow("High "+o.toFixed(2)).addRow("Base "+r.toFixed(2))})),w.setCursorResultTableFormatter(((t,e,i,o,r)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Probability Distribution").addRow("Position "+a).addRow("Value "+o.toFixed(2)).addRow("Base "+r.toFixed(2))})),T.setCursorResultTableFormatter(((t,e,i,o,r)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Violin").addRow("Position "+a).addRow("Value "+o.toFixed(2)).addRow("Low "+r.toFixed(2))}))}},t=>{t.O(0,[736],(()=>(138,t(t.s=138)))),t.O()}]);