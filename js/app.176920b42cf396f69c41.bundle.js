(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(t,e,i)=>{const r=i(89),o=i(863),{emptyLine:a,lightningChart:s,yDimensionStrategy:d,LegendBoxBuilders:n,AxisScrollStrategies:l,AxisTickStrategies:u,AutoCursorModes:S,Themes:c}=r,{createProgressiveFunctionGenerator:x}=o,m=(t,e,i,r,o)=>{let a;for(let s=i;s<=r;s+=o){const i=e(s),r=Math.abs(i-t);if(void 0===a||r<a.delta)a={x:s,delta:r};else if(void 0!==a&&r>a.delta)break}return a.x},y=s().ChartXY({}).setTitle("Probability distribution + Simulated accumulation and BoxSeries").setAutoCursorMode(S.onHover).setAutoCursor((t=>t.setResultTableAutoTextStyle(!1).setTickMarkerXAutoTextStyle(!1).setTickMarkerYAutoTextStyle(!1))).setPadding({right:20}),h=-4,g=.02,A=y.getDefaultAxisY(),p=y.addAxisY();y.getDefaultAxisX().setInterval({start:h,end:4,stopAxisAfter:!1}).setScrollStrategy(void 0),A.setTitle("Distribution function").setScrollStrategy(l.expansion).setTickStrategy(u.Numeric,(t=>t.setMajorTickStyle((t=>t.setGridStrokeStyle(a))).setMinorTickStyle((t=>t.setGridStrokeStyle(a))))),p.setTitle("Accumulated distribution (%)").setInterval({start:0,end:1,stopAxisAfter:!1}).setScrollStrategy(void 0).setTickStrategy(u.Numeric,(t=>t.setMajorTickStyle((t=>t.setGridStrokeStyle(a))).setMinorTickStyle((t=>t.setGridStrokeStyle(a)))));const b=y.addAreaSeries({yAxis:p}).setName("Simulated Cumulative Distribution"),w=y.addAreaSeries({yAxis:A}).setName("Probability Distribution"),T=y.addAreaRangeSeries({yAxis:A}).setName("Violin"),k=y.addBoxSeries({yAxis:A,dimensionStrategy:d}).setName("Box");((t,e)=>{b.clear(),w.clear(),k.clear(),T.clear();const i=t=>1/(1*Math.sqrt(2*Math.PI))*Math.pow(Math.E,-Math.pow(t-0,2)/2),r=((t,e,i,r)=>{const o=[];for(let e=-4;e<=4;e+=.02)o.push(t(e));const a=o.reduce(((t,e)=>t+e),0),s=[];let d=0;for(const t of o)d+=t/a,s.push(d);return t=>{const e=(t- -4)/8*400,i=Math.min(Math.max(Math.round(e),0),s.length-1);return s[i]}})(i);A.getStopped()||A.setInterval({start:0,end:1,stopAxisAfter:!1}),x().setSamplingFunction(r).setStart(h).setEnd(4).setStep(g).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach((t=>b.add(t))),x().setSamplingFunction(i).setStart(h).setEnd(4).setStep(g).generate().setStreamBatchSize(8e3/900).setStreamInterval(30).toStream().forEach((t=>{w.add(t),t.y>=.001&&T.add({position:t.x,high:1+t.y/2,low:1-t.y/2})})),setTimeout((()=>{const t=m(.25,r,h,4,g),e=m(.5,r,h,4,g),i=m(.75,r,h,4,g),o=i-t,a={start:.9,end:1.1,lowerExtreme:t-1.5*o,lowerQuartile:t,median:e,upperQuartile:i,upperExtreme:i+1.5*o};k.add(a)}),1500)})(),y.addLegendBox(n.HorizontalLegendBox).setAutoDispose({type:"max-width",maxWidth:.8}).add(y),b.setCursorResultTableFormatter(((t,e,i,r,o)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Simulated Cumulative Distribution").addRow("Position "+a).addRow("High "+r.toFixed(2)).addRow("Base "+o.toFixed(2))})),w.setCursorResultTableFormatter(((t,e,i,r,o)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Probability Distribution").addRow("Position "+a).addRow("Value "+r.toFixed(2)).addRow("Base "+o.toFixed(2))})),T.setCursorResultTableFormatter(((t,e,i,r,o)=>{const a="-0.00"==i.toFixed(2)?"0.00":i.toFixed(2);return t.addRow("Violin").addRow("Position "+a).addRow("Value "+r.toFixed(2)).addRow("Low "+o.toFixed(2))}))}},t=>{t.O(0,[502],(()=>(44,t(t.s=44)))),t.O()}]);